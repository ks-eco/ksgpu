- name: create a local cert directory to generate certificates
  file:
    path: "{{ local_certs_dir }}"
    state: directory

- name: create a .kube dir
  file:
    path: "~/.kube"
    state: directory

- name: copy ca-config.json file
  copy:
    src: ca-config.json
    dest: "{{ local_certs_dir }}/"

- name: generate *-csr.json file
  template:
    src: "{{ item }}.j2"
    dest: "{{ local_certs_dir }}/{{item}}"
  with_items:
    - admin-csr.json
    - ca-csr.json
    - kube-proxy-csr.json
    - kubernetes-csr.json
    - etcd-csr.json

- name: generate certificates
  shell: |
    cd "{{ local_certs_dir }}"
    cfssl gencert -initca ca-csr.json | cfssljson -bare ca
    cfssl gencert  -ca=ca.pem  -ca-key=ca-key.pem  -config=ca-config.json  -profile=kubernetes \
      admin-csr.json | cfssljson -bare admin
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes \
      kube-proxy-csr.json | cfssljson -bare kube-proxy
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=kubernetes \
      etcd-csr.json | cfssljson -bare etcd
    cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json \
      -hostname={{k8s_kubernetes_svc_ip}},{{master_nodes_list}},{{master_ips_list}},127.0.0.1,kubernetes.default \
      -profile=kubernetes  kubernetes-csr.json | cfssljson -bare kubernetes  

## workers
- name: generate certificate dir for each worker
  file:
    path: "{{ local_certs_dir }}/{{item}}"
    state: directory
  with_items: "{{ groups['k8s-worker'] }}"

- name: generate *-csr.json file for each worker
  template:
    src: "per-worker-csr.json.j2"
    dest: "{{ local_certs_dir }}/{{item}}/{{ item }}-csr.json"
  with_items: "{{ groups['k8s-worker'] }}"

#- name: generate kubeconfig file for kube-proxy
#  shell: |
#    {{local_depot_dir}}/hyperkube kubectl config set-cluster {{k8s_cluster_name}} --certificate-authority=ca.pem \
#          --embed-certs=true --server=https://{{ hostvars[groups['k8s-master'][0]].ansible_host }}:6443  --kubeconfig=kube-proxy.kubeconfig
#    {{local_depot_dir}}/hyperkube kubectl config set-credentials kube-proxy --client-certificate=kube-proxy.pem \
#          --client-key=kube-proxy-key.pem --embed-certs=true --kubeconfig=kube-proxy.kubeconfig
#    {{local_depot_dir}}/hyperkube kubectl config set-context default --cluster={{k8s_cluster_name}} \
#          --user=kube-proxy --kubeconfig=kube-proxy.kubeconfig
#    {{local_depot_dir}}/hyperkube kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig


#- name: generate kubeconfig file for kubelet
#  shell: |
#    cd 
#    cd .kube
#    {{local_depot_dir}}/hyperkube kubectl config set-cluster kubernetes --certificate-authority={{ local_certs_dir }}/ca.pem --embed-certs=true \
#          --server=https://{{ hostvars[groups['k8s-master'][0]].ansible_host }}:6443  --kubeconfig=kubectl.kubeconfig
#    {{local_depot_dir}}/hyperkube kubectl config set-credentials admin --client-certificate=admin.pem --embed-certs=true \
#          --client-key=admin-key.pem --kubeconfig=kubectl.kubeconfig
#    {{local_depot_dir}}/hyperkube kubectl config set-context kubernetes --cluster=kubernetes --user=admin \
#          --kubeconfig=kubectl.kubeconfig
#    {{local_depot_dir}}/hyperkube kubectl config use-context kubernetes --kubeconfig=kubectl.kubeconfig

- name: generate certificates for each worker
  shell: |
    cd "{{ local_certs_dir }}/{{item}}"
    cfssl gencert -ca=../ca.pem -ca-key=../ca-key.pem -config=../ca-config.json -hostname={{item}} \
          --profile=kubernetes {{item}}-csr.json | cfssljson -bare {{item}}
#    {{local_depot_dir}}/hyperkube kubectl config set-cluster {{k8s_cluster_name}} \
#            --certificate-authority=../ca.pem \
#            --embed-certs=true \
#            --server=https://{{ hostvars[groups['k8s-master'][0]].ansible_host }}:6443 \
#            --kubeconfig={{item}}.kubeconfig
#    {{local_depot_dir}}/hyperkube kubectl config set-credentials system:node:{{item}} \
#            --client-certificate={{item}}.pem \
#            --client-key={{item}}-key.pem \
#            --embed-certs=true \
#            --kubeconfig={{item}}.kubeconfig
#    {{local_depot_dir}}/hyperkube kubectl config set-context default \
#            --cluster={{k8s_cluster_name}}
#            --user=system:node:{{item}} \
#            --kubeconfig={{item}}.kubeconfig
#    {{local_depot_dir}}/hyperkube kubectl config use-context default --kubeconfig={{item}}.kubeconfig
  with_items: "{{ groups['k8s-worker'] }}"

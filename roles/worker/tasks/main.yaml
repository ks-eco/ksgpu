- name: install socat conntrack ipset
  package:
    name: "{{ item }}"
    state: present
  with_items:
    - socat
    - conntrack
    - ipset
  become: yes

- name: Turn off swap
  shell: |
    swapoff -a
  become: yes

- name: remove pre-existing k8s directory for worker
  file:
    path: "{{ item }}"
    state: absent
  with_items:
    - "{{ kubelet_var_dir }}"
    - "{{ kube_proxy_var_dir }}"
  become: yes

- name: create k8s directory for worker
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ kubelet_var_dir }}"
    - "{{ kube_proxy_var_dir }}"
    - "{{ k8s_var_lib }}"
    - "/opt/cni/bin"
    - "/etc/cni/net.d"
    - "/etc/containerd"
  become: yes

- name: copy ssl files
  copy:
    src: "{{ local_certs_dir }}/{{inventory_hostname}}/{{item}}"
    dest: "{{ kubelet_var_dir }}"
  with_items:
    - "{{inventory_hostname}}-key.pem"
    - "{{inventory_hostname}}.pem"
  become: yes

- name: copy kube-proxy pem file
  copy:
    src: "{{ local_certs_dir }}/{{item}}"
    dest: "{{ kube_proxy_var_dir }}"
  with_items:
    - kube-proxy.pem
    - kube-proxy-key.pem
  become: yes

# TODO delete the ca file
- name: copy ca file
  copy:
    src: "{{ local_certs_dir }}/ca.pem"
    dest: "{{ item }}"
  with_items:
    - "{{kubelet_var_dir}}"
    - "{{kube_proxy_var_dir}}"
  become: yes  

- name: copy cni binaries to each worker
  copy:
    src: "{{local_depot_dir}}/cni/plugin/{{ item }}"
    dest: "/opt/cni/bin/{{ item }}"
  with_items:
    - bridge
    - dhcp
    - flannel
    - host-local
    - ipvlan
    - loopback
    - macvlan
    - portmap
    - ptp
    - sample
    - tuning
    - vlan
  become: yes

- name: copy runc binaries to each node
  copy:
    src: "{{local_depot_dir}}/cni/runc/{{ item }}"
    dest: "/usr/local/bin/{{ item }}"
  with_items:
    - runc
    - runsc
  become: yes
   
- name: generate loopback network configuration file
  copy:
    src: 99-loopback.conf
    dest: /etc/cni/net.d/99-loopback.conf
  become: yes

- name: generate bridge network configuration file
  template:
    src: 10-bridge.conf.j2
    dest: /etc/cni/net.d/10-bridge.conf
  become: yes


- name: generate containerd configuration file
  copy:
    src: config.toml
    dest: /etc/containerd/config.toml
  become: yes

- name: generate certificates for kubelet
  shell: |
    cd "{{ kubelet_var_dir }}"
    {{k8s_bin_dir}}/kubectl config set-cluster {{k8s_cluster_name}} \
            --certificate-authority=ca.pem \
            --embed-certs=true \
            --server=https://{{ hostvars[groups['k8s-master'][0]].ansible_host }}:6443 \
            --kubeconfig={{ inventory_hostname }}.kubeconfig
    {{k8s_bin_dir}}/kubectl config set-credentials system:node:{{ inventory_hostname }} \
            --client-certificate={{ inventory_hostname }}.pem \
            --client-key={{ inventory_hostname }}-key.pem \
            --embed-certs=true \
            --kubeconfig={{ inventory_hostname }}.kubeconfig
    {{k8s_bin_dir}}/hyperkube kubectl config set-context default \
            --cluster={{k8s_cluster_name}} \
            --user=system:node:{{ inventory_hostname }} \
            --kubeconfig={{ inventory_hostname }}.kubeconfig
    {{k8s_bin_dir}}/hyperkube kubectl config use-context default --kubeconfig={{ inventory_hostname }}.kubeconfig
  become: yes

- name: generate certificates for kube-proxy
  shell: |
    cd "{{ kube_proxy_var_dir }}"
    {{k8s_bin_dir}}/kubectl config set-cluster {{k8s_cluster_name}} \
            --certificate-authority=ca.pem \
            --embed-certs=true \
            --server=https://{{ hostvars[groups['k8s-master'][0]].ansible_host }}:6443 \
            --kubeconfig=kube-proxy.kubeconfig
    {{k8s_bin_dir}}/kubectl config set-credentials system:kube-proxy \
            --client-certificate=kube-proxy.pem \
            --client-key=kube-proxy-key.pem \
            --embed-certs=true \
            --kubeconfig=kube-proxy.kubeconfig
    {{k8s_bin_dir}}/kubectl config set-context default \
            --cluster={{k8s_cluster_name}} \
            --user=system:kube-proxy \
            --kubeconfig=kube-proxy.kubeconfig
    {{k8s_bin_dir}}/kubectl config use-context default --kubeconfig=kube-proxy.kubeconfig
  become: yes
  
- name: generate kube-proxy config file
  template:
    src: "kube-proxy.config.j2"
    dest: "{{ kube_proxy_var_dir }}/kube-proxy.config"
  become: yes
  notify:
    - "restart kube-proxy service"

- name: generate containerd service file
  copy:
    src: containerd.service
    dest: /etc/systemd/system/containerd.service
  notify:
    - "restart containerd service"
    
- name: generate kube-proxy service file
  template:
    src: kube-proxy.service.j2
    dest: "{{ systemd_service_dir }}/kube-proxy.service"
  become: yes
  notify:
    - "restart kube-proxy service"


- name: generate kubelet config file
  template:
    src: "kubelet.config.j2"
    dest: "{{ kubelet_var_dir }}/kubelet.config"
  become: yes
  notify:
    - "restart kube-proxy service"

- name: generate kubelet service file
  template:
    src: kubelet.service.j2
    dest: "{{ systemd_service_dir }}/kubelet.service"
  become: yes
  notify:
    - "restart kubelet service"

